{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/Form.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","theme","style","width","onChange","setTheme","document","querySelector","value","toggleMode","Alert","alert","toLowerCase","role","msg","Form","count","useState","text","setText","result","setResult","heading","rows","placeholder","event","target","disabled","length","onClick","toUpperCase","showAlert","mailList","split","filter","element","indexOf","push","Set","extra","join","navigator","clipboard","writeText","ele","Math","floor","map","data","About","App","setMode","setAlert","message","setTimeout","backgroundColor","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.09183ca6.chunk.js","sourcesContent":["import {Link} from \"react-router-dom\"\r\n\r\nexport default function Navbar(props) {\r\n\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" aria-current=\"page\" to=\"/about\">About</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* Since we can't pass a function call in onChange(which is an event listener) and must pass a function there, we will pass an arrow function which calls our setTheme function with given parameter */}\r\n                    <select className={`no-out form-select btn-${props.theme} mx-2 my-1`} aria-label=\"Default select example\" style={{ width: \"auto\" }} onChange={()=>{props.setTheme(document.querySelector(\"select\").value)}}>\r\n                        <option value=\"primary\" className={`bg-${props.mode} text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>Blue Theme</option>\r\n                        <option value=\"success\" className={`bg-${props.mode} text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>Green Theme</option>\r\n                        <option value=\"warning\" className={`bg-${props.mode} text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>Yellow Theme</option>\r\n                        <option value=\"danger\" className={`bg-${props.mode} text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>Red Theme</option>\r\n                    </select>\r\n                    <select className={`no-out form-select btn-${props.theme} mx-2 my-1`} aria-label=\"Default select example\" style={{ width: \"auto\" }} onChange={props.toggleMode}>\r\n                        <option value=\"light\" className={`bg-${props.mode} text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>Light Mode</option>\r\n                        <option value=\"dark\" className={`bg-${props.mode} text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>Dark Mode</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","export default function Alert(props) {\r\n    return (\r\n        <div className={`alert alert-${props.alert.type.toLowerCase()} alert-dismissible fade text-center ${props.alert.type ? \"show\" : \"hide\"}`} role=\"alert\">\r\n            <strong>{props.alert.type ? props.alert.type + \" : \" : <>&#8203;</>}</strong>{props.alert.msg}\r\n        </div>\r\n    )\r\n}","import { useState } from 'react'; // importing useState from react which is a hook(it lets us use state and other class features without a class, i.e., with functions), useState is actually a function only.\r\n\r\nexport default function Form(props) {\r\n\r\n    var count = 0;\r\n\r\n    const [text, setText] = useState(\"\"); // must be used inside the respective function anywhere before return\r\n    // const [state(current), setstate(function to update state)] = useState(initialState);\r\n    // Now usestate() returns an array with a state and a updation function which will update the state of a component and update it at every place where it was being used/will be used without reloading the page, this is better than changing variable value as it won't update the values of variable where it was already used and will update only where it will be used in future\r\n\r\n    // Now useState gave some initial value to text, and now we can update text using setText function by setText(newState) and as soon as we use this function, the value of text will be updated everywhere it was being used/will be used.\r\n\r\n    const [result, setResult] = useState([])\r\n\r\n    function upClick() {\r\n        setText(text.toUpperCase());\r\n        props.showAlert(\"Converted to UPPERCASE!\", \"Success\")\r\n    }\r\n    function lowClick() {\r\n        setText(text.toLowerCase());\r\n        props.showAlert(\"Converted to lowercase!\", \"Success\")\r\n    }\r\n    function mailClick() {\r\n        let mailList = []\r\n        text.split(/(?: |\\n)/).filter(element => { // both space and new-line are separators\r\n            if (element.indexOf('.') - element.indexOf(\"@\") > 1) {\r\n                mailList.push(element)\r\n            }\r\n            return null;\r\n        })\r\n        mailList = [...new Set(mailList)]\r\n        setResult(mailList)\r\n        count = 0;\r\n        mailList.length > 0 ? props.showAlert(\"Mails extracted!\", \"Success\") : props.showAlert(\"No mails available!\", \"Warning\")\r\n    }\r\n    function removeClick() {\r\n        let extra = text.split(/[ ]+/) // spitting text if one or more spaces\r\n        extra = extra.join(\" \")\r\n        setText(extra)\r\n        props.showAlert(\"Extra spaces removed!\", \"Success\")\r\n    }\r\n    function copyClick() {\r\n        // copy.select() // selects the text(usually the blue highlighting)\r\n        navigator.clipboard.writeText(text) // executing Ctrl+C command\r\n        // document.getSelection().removeAllRanges() // deselects the text\r\n        // Using the navigator, we don't need to select and deselect text\r\n        props.showAlert(\"Text copied!\", \"Success\")\r\n    }\r\n    function clearClick() {\r\n        setText('')\r\n        props.showAlert(\"Text cleared!\", \"Success\")\r\n    }\r\n    function change(event) { // onChange passes an event parameter by default\r\n        setText(event.target.value); // event.target.value gives the updated value after the event occurs\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container mb-3 my-3 border p-3\">\r\n                <h3>{props.heading}</h3>\r\n                <div className=\"mb-3 my-3\">\r\n                    <textarea className={`form-control bg-${props.mode === \"light\" ? \"white\" : \"dark\"} text-${props.mode === \"light\" ? \"dark\" : \"light\"}`} id=\"myBox\" rows=\"8\" placeholder=\"Enter Text Here\" value={text} onChange={change}></textarea>\r\n                </div>\r\n                {/* disabled attribute can be used to disable xml tag (only disabled to be written for permanent disability and if we want to add a condition, we can put the condition using '=' and then the condition as below) */}\r\n                <button disabled={text.length === 0} className={`btn btn-${props.theme} m-2`} onClick={upClick}>Convert to Uppercase</button>\r\n                <button disabled={text.length === 0} className={`btn btn-${props.theme} m-2`} onClick={lowClick}>Convert to Lowercase</button>\r\n                <button disabled={text.length === 0} className={`btn btn-${props.theme} m-2`} onClick={mailClick}>Extract Mail</button>\r\n                <button disabled={text.length === 0} className={`btn btn-${props.theme} m-2`} onClick={removeClick}>Remove Extra Spaces</button>\r\n                <button disabled={text.length === 0} className={`btn btn-${props.theme} m-2`} onClick={copyClick}>Copy Text</button>\r\n                <button disabled={text.length === 0} className={`btn btn-${props.theme} m-2`} onClick={clearClick}>Clear Text</button>\r\n            </div>\r\n\r\n            <div className=\"container mb-3 my-3 border p-3\">\r\n                <h4>Text summary</h4>\r\n                <div className=\"mb-3 my-3\">\r\n                    {text.length} characters, {\r\n                        (text.split(/\\s+/).filter(ele => {\r\n                            return ele !== '';\r\n                        }).length)\r\n                    } words, {\r\n                        Math.floor(text.split(/\\s+/).filter(ele => {\r\n                            return ele !== '';\r\n                        }).length * 60 / 125)\r\n                    } seconds read\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"container mb-3 my-3 border p-3\">\r\n                <h4>Result</h4>\r\n                {/* array.map() discussed in loops in js (map worked here instead of forEach as we wanted to return the html) */}\r\n                {/* since we are using map() and multiple divs are being rendered, thus each div should have a unique key to identify it among other divs (key is similar to id but for map(), key is used instead of id to identify a tag). It uniquely identifies tags not only for map() but also in different situations(discussed in newsapp) */}\r\n                {result.map((data) => {\r\n                    // here we are updating count for every iteration and hence, every div has unique key\r\n                    return (result.length > 1 ? <li key={`${count++}`} id=\"myResult\" type=\"1\" className=\"mb-3 my-3\">{data}</li> : <div id=\"myResult\" className=\"mb-3 my-3\">{data}</div>)\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n}","export default function About(props) {\r\n\r\n    return (\r\n        <div className={`container p-3 my-3 border`}>\r\n            <h2 className=\"text-center\">About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className={`accordion-item my-2 border bg-${props.mode} text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className={`accordion-button border no-out bg-${props.mode} text-${props.mode === \"light\" ? \"dark\" : \"light\"}`} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\"><strong>Analyze Your Text</strong></button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            TextUtils gives you a way to analyze to your text quickly and efficiently. Be it word count, character count. Thus, it is suitable for writing text with word or character limit.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={`accordion-item my-2 border bg-${props.mode} text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className={`accordion-button collapsed border no-out bg-${props.mode} text-${props.mode === \"light\" ? \"dark\" : \"light\"}`} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\"><strong>Free To Use</strong></button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            TextUtils is a free character counter tool that provides instant character count and word count statistics for a given text.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={`accordion-item my-2 border bg-${props.mode} text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className={`accordion-button collapsed border no-out bg-${props.mode} text-${props.mode === \"light\" ? \"dark\" : \"light\"}`} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\"><strong>Browser Compatible</strong></button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            This word counter software works in any web browsers such as Chrome, Firefox, Edge, Safari, Opera, etc. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport './App.css';\r\nimport Navbar from './components/Navbar'\r\nimport Alert from './components/Alert'\r\nimport Form from './components/Form'\r\nimport About from './components/About'\r\nimport {\r\n  HashRouter as Router, // a container for Routes(Switch), Route and Link to pack and link all tags to each other\r\n  Routes as Switch, // a container for Route\r\n  Route // accepts path attribute as url of webpage and element as component to get blitted and routes it to that element\r\n  // Link // we will use it in navbar as navbar contains the button using which we want to link our components to routes. to attribute in <Link> contains the url which we want to access. Now it may appear similar to anchor tag (<a href=\"url\">) but it is different as it switches to that particular link without reloading the page(unlike <a>)\r\n} from \"react-router-dom\"\r\n\r\nfunction App() {\r\n\r\n  const [mode, setMode] = useState(\"light\");\r\n  const [alert, setAlert] = useState({ msg: null, type: \"\" });\r\n  const [theme, setTheme] = useState(\"primary\");\r\n\r\n  function showAlert(message, type) {\r\n    setAlert({ msg: message, type: type });\r\n    setTimeout(() => {\r\n      setAlert({ msg: null, type: \"\" })\r\n    }, 1500);\r\n  }\r\n\r\n  function toggleMode() {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\")\r\n      showAlert(\"Dark Mode Enabled!\", \"Success\")\r\n      document.querySelector(\"html\").style.backgroundColor = \"#212529\";\r\n    }\r\n    else {\r\n      setMode(\"light\")\r\n      showAlert(\"Light Mode Enabled!\", \"Success\")\r\n      document.querySelector(\"html\").style.backgroundColor = \"white\";\r\n    }\r\n    setTheme(theme);\r\n  }\r\n\r\n  return (\r\n    // using text-white class for div when light mode enabled so as to differentiate between       navbar(which used text-light) and main content (text-light is a bit greyish)\r\n    <div className={`bg-${mode === \"light\" ? \"white\" : \"dark\"} text-${mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n      <Router>\r\n        <Navbar title=\"Text-Utils\" mode={mode} toggleMode={toggleMode} theme={theme} setTheme={setTheme} />\r\n        <Alert alert={alert} />\r\n        <div className=\"container\">\r\n          {/* A <Switch> looks through its children <Route>s and renders the first one that matches the current URL. These Switches must be kept inside a <Router>. Also, in latest version of react-router-dom, <Switch> has been replaced by <Routes>. So either, we can use <Routes> instead of <Switch> of import <Routes> as <Switch> (this way implemented above) */}\r\n          <Switch>\r\n            <Route path=\"/\" element={<Form heading=\"Enter the text to analyze\" mode={mode} showAlert={showAlert} theme={theme} />} />\r\n            <Route path=\"/about\" element={<About mode={mode} />} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}